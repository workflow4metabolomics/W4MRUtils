
variables:
  cran_url: https://cran.irsn.fr
  set_cran: export CRAN=${cran_url};
  set_rcran: options(repos='$cran_url');
  DOCKER_IMAGE: w4mrutils

stages:
  - build
  - check
  - test
  - deploy

code quality check:
  stage: build
  tags: [shell]
  script:
    - |
      doc_count=$(grep -P "^#'" R/*.R | wc -l) ;
      sloc_count=$(grep -P '^\s*[^#]{2,}' R/*.R | wc -l) ;
      ratio=$(bc <<< "scale=2;$doc_count/$sloc_count*100" | cut -d. -f1) ;
      echo "[documentation / code ratio = $ratio]"
      if [ $ratio -lt 70 ];then
        echo "Not enough documentation." ;
        exit 1 ;
      elif [ $ratio -lt 75 ];then
        echo "Attention, the [documentation / code] ratio is very low" ;
      fi



.parallel:
  parallel:
    matrix:
      - R_VERSION:
         - "4.3.1"
         - "4.2.3"
         - "4.1.3"
         - "4.0.5"

rm prev docker images:
  stage: deploy
  tags: [shell]
  extends: .parallel
  script:
      - docker rmi --force "${rocker/tidyverse}-${R_VERSION}"

Build docker image:
  stage: build
  tags: [shell]
  script:
    - |
      echo "==================================";
      echo "[info] Building Docker image for $DOCKER_IMAGE ";
      docker build \
        --build-arg="R_VERSION=${R_VERSION}" \
        --tag "$DOCKER_IMAGE" \
        . ;

checking:
  needs: ["Build docker image"]
  stage: check
  image: $DOCKER_IMAGE
  allow_failure: true
  script:
    - R -q -e "devtools::check('$CI_PROJECT_DIR')"
  tags: [docker]
# To have the coverage percentage appear as a gitlab badge follow these
# instructions:
# https://docs.gitlab.com/ee/user/project/pipelines/settings.html#test-coverage-parsing
# The coverage parsing string is
# Coverage: \d+\.\d+

testing:
  needs: [checking]
  stage: test
  only: [dev,main]
  image: $DOCKER_IMAGE
  allow_failure: true
  when: on_success
  script:
    - R -q -e "devtools::test('$CI_PROJECT_DIR')"
    - R -q -e "covr::gitlab(quiet = FALSE)"
  artifacts:
    paths: [public]
  tags: [docker]
  coverage: '/ Coverage: \d+\.\d+/'

# To produce a code coverage report as a GitLab page see
# https://about.gitlab.com/2016/11/03/publish-code-coverage-report-with-gitlab-pages/

pages:
  needs: [testing]
  stage: deploy
  only: [main]
  image: $DOCKER_IMAGE
  dependencies: [testing]
  script:
    - ls
  artifacts:
    paths: [public]
    expire_in: 30 days
  tags: [docker]

building conda recipe:
  stage: build
  only: [main]
  allow_failure: true
  image: quay.io/condaforge/linux-anvil-cos7-x86_64
  script:
    - conda-build --override-channels -c conda-forge $CI_PROJECT_DIR/meta.yaml
  tags: [docker]
